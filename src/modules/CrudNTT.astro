---
/* eslint max-lines: 'off' */

import type { ColDef } from 'ag-grid-community';
import { getMetaData, prisma } from '../../prisma/db-utils';
import AgGrid from '../lib/core/AgGrid.svelte';

import FormIq from '../lib/core/FormIq.astro';
import { isRemovable, mapAgGridType } from './form.resolvers';

const slug = new URL(Astro.request.url).pathname;
const split = slug.split('/');
const entity = split[split.length - 2];

console.log("ntt", entity);

const metaData = getMetaData(entity);
console.log("metaData", metaData);
const fetcher = (prisma as any)[entity];
if (!fetcher) return;

const rowData = await fetcher.findMany({
	take: 100
});

const mapper = new Map<string, string | boolean>();
mapper.set("Decimal", true);
mapper.set("Int", "number");
mapper.set("BigInt", "number");
mapper.set("String", "text");
mapper.set("DateTime", "dateString");

const mapColType = mapAgGridType(metaData);

const columnDefs: ColDef[] = rowData?.length ? Object.keys(rowData[0])
	.filter(f => !isRemovable(f))
	.map(field => {
		const ret = {
				field,
				filter: true,
				cellDataType: mapper.get(mapColType(field)) ?? "text"
			}

		if (field === "id") {
			return ({
				...ret,
				hide: true				
			})
		}
		return ({
			...ret
		})
	}) : [];

console.log("rowData", rowData[0]);
console.log("columnDefs", columnDefs);
 // Column Definitions: Defines the columns to be displayed.
//  const columnDefs = [
//    { field: "make", filter: true },
//    { field: "model", filter: true },
//    { field: "price", filter: true },
//    { field: "electric", filter: true }
//  ];


---
<>
<section class="bg-white dark:bg-gray-900">
	<div class="py-8 px-4 mx-auto max-w-full lg:py-16">
		<h2 class="mb-4 text-xl font-bold text-gray-900 dark:text-white">
			Add a new <span class="capitalize">{entity}</span>:
		</h2>

		<FormIq {metaData} {entity}/>

	</div>
</section>

<AgGrid {rowData} {columnDefs} client:only="svelte"/>
</>
