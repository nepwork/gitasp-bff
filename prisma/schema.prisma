// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../docs/db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Country {
  Nepal
  Afghanistan
  Albania
  Algeria
  Andorra
  Angola
  Antigua
  Argentina
  Armenia
  Australia
  Austria
  Azerbaijan
  Bahamas
  Bahrain
  Bangladesh
  Barbados
  Belarus
  Belgium
  Belize
  Benin
  Bhutan
  Bolivia
  Bosnia
  Botswana
  Brazil
  Brunei
  Bulgaria
  Burkina
  Burundi
  Cote
  Cabo
  Cambodia
  Cameroon
  Canada
  Central
  Chad
  Chile
  China
  Colombia
  Comoros
  Congo
  Costa
  Croatia
  Cuba
  Cyprus
  Czechia
  Democratic
  Denmark
  Djibouti
  Dominica
  Dominican
  Ecuador
  Egypt
  El
  Equatorial
  Eritrea
  Estonia
  Eswatini
  Ethiopia
  Fiji
  Finland
  France
  Gabon
  Gambia
  Georgia
  Germany
  Ghana
  Greece
  Grenada
  Guatemala
  Guinea
  Guyana
  Haiti
  Holy
  Honduras
  Hungary
  Iceland
  India
  Indonesia
  Iran
  Iraq
  Ireland
  Israel
  Italy
  Jamaica
  Japan
  Jordan
  Kazakhstan
  Kenya
  Kiribati
  Kuwait
  Kyrgyzstan
  Laos
  Latvia
  Lebanon
  Lesotho
  Liberia
  Libya
  Liechtenstein
  Luxembourg
  Lithuania
  Madagascar
  Malawi
  Malaysia
  Maldives
  Mali
  Malta
  MarshallIslands
  Mauritania
  Mauritius
  Mexico
  Micronesia
  Moldova
  Monaco
  Mongolia
  Montenegro
  Morocco
  Mozambique
  Myanmar
  Namibia
  Nauru
  Netherlands
  New_Zealand
  Nicaragua
  Niger
  Nigeria
  North_Korea
  North_Macedonia
  Norway
  Oman
  Pakistan
  Palau
  Palestine_State
  Panama
  Papua_New_Guinea
  Paraguay
  Peru
  Philippines
  Poland
  Portugal
  Qatar
  Romania
  Russia
  Rwanda
  Saint_Kitts_and_Nevis
  Saint_Lucia
  Saint_Vincent_and_the_Grenadines
  Samoa
  San_Marino
  Sao_Tome_and_Principe
  Saudi_Arabia
  Senegal
  Serbia
  Seychelles
  Sierra_Leone
  Singapore
  Slovakia
  Slovenia
  Solomon_Islands
  Somalia
  South_Africa
  South_Korea
  South_Sudan
  Spain
  Sri_Lanka
  Sudan
  Suriname
  Sweden
  Switzerland
  Syria
  Tajikistan
  Tanzania
  Thailand
  Timor_Leste
  Togo
  Tonga
  Trinidad_and_Tobago
  Tunisia
  Turkey
  Turkmenistan
  Tuvalu
  Uganda
  Ukraine
  United_Arab_Emirates
  United_Kingdom
  United_States_of_America
  Uruguay
  Uzbekistan
  Vanuatu
  Venezuela
  Vietnam
  Yemen
  Zambia
  Zimbabwe
}

///AuthJS
model Person {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  username  String  @unique
  firstName String?
  lastName  String

  password String?

  phoneCode   Int  @default(977)
  phoneNumber Int?

  streetName String?
  city       String?
  areaCode   String?
  country    Country @default(Nepal)

  email         String?   @unique
  emailVerified DateTime?

  payerType DiscountType @default(RegularMember)

  image    String?
  accounts Account[]
  sessions Session[]

  // Optional, for WebAuthn support
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("person")
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
	
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Person @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expiresAt    DateTime
  user         Person   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user Person @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

enum DiscountType {
  FirstTimer
  RegularMember
  PremiumMember

  @@map("discount_type")
}

enum PaymentMethod {
  CashAtCounter
  QRCodeEsewa
  QRCodeBank
  CashPartial

  @@map("payment_method")
}

// Root
model Payment {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patientName        String
  phoneNumber        String
  paymentMethod      PaymentMethod @default(CashAtCounter)
  totalPayableAmount Decimal
  discountApplied    Decimal       @default(0.0)
  paidAmount         Decimal       @default(0.0)
  reasonForVisit     String

  @@map("payment")
}

///AuthJS

model Appointment {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid              String          @unique
  appointmentTypeId String          @db.Uuid
  patientId         String          @db.Uuid
  locationId        String          @db.Uuid
  providerId        String          @db.Uuid
  startDatetime     DateTime
  endDatetime       DateTime
  voided            Boolean         @default(false)
  voidedBy          String
  dateVoided        DateTime
  voidReason        String
  creator           String
  dateCreated       DateTime
  lastChangedBy     String
  lastChangedDate   DateTime
  appointmentType   AppointmentType @relation(fields: [appointmentTypeId], references: [id])
  location          Location        @relation(fields: [locationId], references: [id])
  patient           Patient         @relation(fields: [patientId], references: [id])
  provider          Provider        @relation(fields: [providerId], references: [id])

  @@unique([patientId, locationId, providerId])
  @@map("appointment")
}

model AppointmentType {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String        @unique
  name            String
  description     String
  duration        Int
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]

  @@map("appointment_type")
}

model Location {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String        @unique
  name            String
  description     String
  address1        String
  address2        String
  city            String
  stateProvince   String
  country         String
  postalCode      String
  latitude        Float
  longitude       Float
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]
  encounterList   Encounter[]

  @@map("location")
}

model Patient {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String        @unique
  givenName       String
  middleName      String
  familyName      String
  gender          String
  birthdate       DateTime
  dead            Boolean       @default(false)
  deathDate       DateTime
  causeOfDeath    String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]
  encounterList   Encounter[]

  @@map("patient")
}

model Provider {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String        @unique
  name            String
  identifier      String
  description     String
  voided          Boolean       @default(false)
  voidedBy        String
  dateVoided      DateTime
  voidReason      String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]
  encounterList   Encounter[]

  @@map("provider")
}

model Form {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid               String           @unique
  name               String
  description        String
  version            String
  retired            Boolean          @default(false)
  retiredBy          String
  dateRetired        DateTime
  retiredReason      String
  creator            String
  dateCreated        DateTime
  lastChangedBy      String
  lastChangedDate    DateTime
  fieldId            String?          @db.Uuid
  encounterList      Encounter[]
  field              Field?           @relation(fields: [fieldId], references: [id])
  formEncounterList  FormEncounter[]
  formResourceList   FormResource[]
  formSubmissionList FormSubmission[]

  @@map("form")
}

model FormEncounter {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  formId          String    @db.Uuid
  encounterId     String    @db.Uuid
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  encounter       Encounter @relation(fields: [encounterId], references: [id])
  form            Form      @relation(fields: [formId], references: [id])

  @@map("form_encounter")
}

model FormResource {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  formId          String   @db.Uuid
  resourceId      String   @db.Uuid
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  form            Form     @relation(fields: [formId], references: [id])
  resource        Resource @relation(fields: [resourceId], references: [id])

  @@map("form_resource")
}

model FormSubmission {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String        @unique
  formId          String        @db.Uuid
  encounterId     String        @db.Uuid
  submissionDate  DateTime
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  fieldAnswerList FieldAnswer[]
  encounter       Encounter     @relation(fields: [encounterId], references: [id])
  form            Form          @relation(fields: [formId], references: [id])

  @@map("form_submission")
}

model Field {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String        @unique
  name            String
  description     String
  fieldType       String
  conceptId       String        @db.Uuid
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  concept         Concept       @relation(fields: [conceptId], references: [id])
  fieldAnswerList FieldAnswer[]
  fieldOptionList FieldOption[]
  formList        Form[]

  @@map("field")
}

model FieldAnswer {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid             String         @unique
  formSubmissionId String         @db.Uuid
  fieldId          String         @db.Uuid
  value            String
  creator          String
  dateCreated      DateTime
  lastChangedBy    String
  lastChangedDate  DateTime
  field            Field          @relation(fields: [fieldId], references: [id])
  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id])

  @@map("field_answer")
}

model FieldOption {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  fieldId         String   @db.Uuid
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  field           Field    @relation(fields: [fieldId], references: [id])

  @@map("field_option")
}

model Encounter {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid               String           @unique
  encounterTypeId    String           @db.Uuid
  patientId          String           @db.Uuid
  locationId         String           @db.Uuid
  formId             String           @db.Uuid
  providerId         String           @db.Uuid
  startDatetime      DateTime
  endDatetime        DateTime
  voided             Boolean          @default(false)
  voidedBy           String
  dateVoided         DateTime
  voidReason         String
  creator            String
  dateCreated        DateTime
  lastChangedBy      String
  lastChangedDate    DateTime
  encounterType      EncounterType    @relation(fields: [encounterTypeId], references: [id])
  form               Form             @relation(fields: [formId], references: [id])
  location           Location         @relation(fields: [locationId], references: [id])
  patient            Patient          @relation(fields: [patientId], references: [id])
  provider           Provider         @relation(fields: [providerId], references: [id])
  formEncounterList  FormEncounter[]
  formSubmissionList FormSubmission[]
  obsList            Obs[]
  orderList          Order[]

  @@map("encounter")
}

model EncounterType {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String      @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  encounterList   Encounter[]

  @@map("encounter_type")
}

model Obs {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  conceptId       String    @db.Uuid
  encounterId     String    @db.Uuid
  obsDatetime     DateTime
  valueDatetime   DateTime
  valueNumeric    Float
  valueText       String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  concept         Concept   @relation(fields: [conceptId], references: [id])
  encounter       Encounter @relation(fields: [encounterId], references: [id])

  @@map("obs")
}

model Order {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid             String          @unique
  conceptId        String          @db.Uuid
  encounterId      String          @db.Uuid
  orderDatetime    DateTime
  instructions     String
  dosage           String
  route            String
  frequency        String
  asNeeded         Boolean         @default(false)
  prn              Boolean         @default(false)
  quantity         Int
  units            String
  creator          String
  dateCreated      DateTime
  lastChangedBy    String
  lastChangedDate  DateTime
  orderFrequencyId String?         @db.Uuid
  orderRouteId     String?         @db.Uuid
  orderTypeId      String?         @db.Uuid
  orderUnitId      String?         @db.Uuid
  concept          Concept         @relation(fields: [conceptId], references: [id])
  encounter        Encounter       @relation(fields: [encounterId], references: [id])
  OrderFrequency   OrderFrequency? @relation(fields: [orderFrequencyId], references: [id])
  OrderRoute       OrderRoute?     @relation(fields: [orderRouteId], references: [id])
  OrderType        OrderType?      @relation(fields: [orderTypeId], references: [id])
  OrderUnit        OrderUnit?      @relation(fields: [orderUnitId], references: [id])

  @@map("order")
}

model OrderFrequency {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_frequency")
}

model OrderRoute {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_route")
}

model OrderType {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_type")
}

model OrderUnit {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_unit")
}

model Concept {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid                String            @unique
  name                String
  description         String
  dataType            String
  class               String
  isRetired           Boolean           @default(false)
  retiredBy           String
  dateRetired         DateTime
  retiredReason       String
  creator             String
  dateCreated         DateTime
  lastChangedBy       String
  lastChangedDate     DateTime
  conceptClassId      String?           @db.Uuid
  conceptDatatypeId   String?           @db.Uuid
  conceptMapId        String?           @db.Uuid
  conceptSetId        String?           @db.Uuid
  conceptSourceId     String?           @db.Uuid
  ConceptClass        ConceptClass?     @relation(fields: [conceptClassId], references: [id])
  ConceptDatatype     ConceptDatatype?  @relation(fields: [conceptDatatypeId], references: [id])
  conceptMap          ConceptMap?       @relation(fields: [conceptMapId], references: [id])
  conceptSet          ConceptSet?       @relation(fields: [conceptSetId], references: [id])
  conceptSource       ConceptSource?    @relation(fields: [conceptSourceId], references: [id])
  answerList          ConceptAnswer[]   @relation("answer_concept")
  metaList            ConceptAnswer[]   @relation("meta_concept")
  conceptNameList     ConceptName[]
  conceptNumericList  ConceptNumeric[]
  conceptProposalList ConceptProposal[]
  conceptWordList     ConceptWord[]
  fieldList           Field[]
  obsList             Obs[]
  orderList           Order[]

  @@map("concept")
}

model ConceptAnswer {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  conceptId       String   @db.Uuid
  answerConceptId String   @db.Uuid
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  answerConcept   Concept  @relation("answer_concept", fields: [answerConceptId], references: [id])
  concept         Concept  @relation("meta_concept", fields: [conceptId], references: [id])

  @@map("concept_answer")
}

model ConceptClass {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_class")
}

model ConceptDatatype {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_data_type")
}

model ConceptMap {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_map")
}

model ConceptName {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  conceptId       String   @db.Uuid
  name            String
  locale          String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  concept         Concept  @relation(fields: [conceptId], references: [id])

  @@map("concept_name")
}

model ConceptNumeric {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  conceptId       String   @db.Uuid
  hiAbsolute      Float
  hiCritical      Float
  hiNormal        Float
  lowAbsolute     Float
  lowCritical     Float
  lowNormal       Float
  units           String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  concept         Concept  @relation(fields: [conceptId], references: [id])

  @@map("concept_numeric")
}

model ConceptProposal {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  conceptId       String   @db.Uuid
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  concept         Concept  @relation(fields: [conceptId], references: [id])

  @@map("concept_proposal")
}

model ConceptSet {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_set")
}

model ConceptSource {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_source")
}

model ConceptWord {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid            String   @unique
  conceptId       String   @db.Uuid
  word            String
  locale          String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  concept         Concept  @relation(fields: [conceptId], references: [id])

  @@map("concept_word")
}

model Resource {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uuid             String         @unique
  name             String
  description      String
  creator          String
  dateCreated      DateTime
  lastChangedBy    String
  lastChangedDate  DateTime
  formResourceList FormResource[]

  @@map("resource")
}

model BlogPost {
  id                     String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                  String
  content                String
  context                Json
  authorId               String               @db.Uuid
  spaceTimeCoordinatesId String               @unique @db.Uuid
  author                 BlogPostAuthor       @relation(fields: [authorId], references: [id])
  spaceTimeCoordinates   SpaceTimeCoordinates @relation(fields: [spaceTimeCoordinatesId], references: [id])
  tagArrowList           BlogPostTagArrow[]

  @@map("blog_post")
}

model BlogPostTag {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  descriptor    String?
  postArrowList BlogPostTagArrow[]

  @@map("blog_post_tag")
}

model BlogPostTagArrow {
  id     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId String      @db.Uuid
  tagId  String      @db.Uuid
  post   BlogPost    @relation(fields: [postId], references: [id])
  tag    BlogPostTag @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
  @@map("blog_post_tag_arrow")
}

model BlogPostAuthor {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  blogPostList BlogPost[]

  @@map("blog_post_author")
}

model SpaceTimeCoordinates {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  latitude   Float
  longitude  Float
  startTime  Float
  pauseTime  Float?
  stopTime   Float
  timezone   String
  blogPostId String    @db.Uuid
  BlogPost   BlogPost?

  @@map("space_time_coordinates")
}

model BudgetEntry {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId     String   @db.Uuid
  cost          Float
  discount      Float
  promotion     Float
  subtotal      Float
  percentChange Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  budgetId      String   @db.Uuid
  budget        Budget   @relation(fields: [budgetId], references: [id])
  service       Service  @relation(fields: [serviceId], references: [id])
}

model Service {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  category    String
  metadata    Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  entryList   BudgetEntry[]
}

model Budget {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  fiscalYear Int
  reportId   String?         @db.Uuid
  userList   BudgetBudUser[]
  entryList  BudgetEntry[]
  report     Report?
}

model Report {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  budgetId       String   @unique @db.Uuid
  totalCost      Float
  totalDiscount  Float
  totalPromotion Float
  totalSubtotal  Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  budget         Budget   @relation(fields: [budgetId], references: [id])
}

model BudUser {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  email      String          @unique
  password   String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  eventList  BudEvent[]
  budgetList BudgetBudUser[]

  @@map("BudgetUser")
}

model BudgetBudUser {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId   String  @db.Uuid
  budgetId String  @db.Uuid
  role     String
  ability  String
  category String
  budget   Budget  @relation(fields: [budgetId], references: [id])
  user     BudUser @relation(fields: [userId], references: [id])

  @@unique([userId, budgetId])
  @@map("BudgetBudgetUser")
}

model BudEvent {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  description  String
  categoryList String[]
  metadata     Json
  budUserId    String   @db.Uuid
  createdAt    DateTime @default(now())
  budUser      BudUser  @relation(fields: [budUserId], references: [id])
}
